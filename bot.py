import os
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import sqlite3

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class PetBot:
    def __init__(self):
        self.token = "8135031305:AAHNRm3-PuG10Prai4z-dYV8N3FzElohCEA"
        self.conn = sqlite3.connect('pets.db', check_same_thread=False)
        self.cursor = self.conn.cursor()
        self._init_database()

    def _init_database(self):
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–∏—Ç–æ–º—Ü–µ–≤
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS pets (
                    user_id INTEGER PRIMARY KEY,
                    level INTEGER DEFAULT 0,
                    actions INTEGER DEFAULT 0,
                    pet TEXT,
                    img TEXT,
                    swipe_count INTEGER DEFAULT 0,
                    is_cracked INTEGER DEFAULT 0,
                    rarity TEXT DEFAULT "common",
                    coins INTEGER DEFAULT 0
                )
            ''')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—è coins, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º
            try:
                self.cursor.execute('SELECT coins FROM pets LIMIT 1')
            except sqlite3.OperationalError:
                self.cursor.execute('ALTER TABLE pets ADD COLUMN coins INTEGER DEFAULT 0')

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS quests (
                    quest_id INTEGER PRIMARY KEY,
                    description TEXT,
                    reward INTEGER
                )
            ''')

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_quests (
                    user_id INTEGER,
                    quest_id INTEGER,
                    completed INTEGER DEFAULT 0,
                    FOREIGN KEY(user_id) REFERENCES pets(user_id),
                    FOREIGN KEY(quest_id) REFERENCES quests(quest_id)
                )
            ''')

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±–º–µ–Ω –ø–∏—Ç–æ–º—Ü–∞–º–∏
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS trade_requests (
                    from_user_id INTEGER,
                    to_user_id INTEGER,
                    pet_id INTEGER,
                    status TEXT DEFAULT "pending"
                )
            ''')

            self.conn.commit()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user_id = update.effective_user.id
            self._init_user(user_id)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            self.cursor.execute('SELECT pet, img, swipe_count, is_cracked, coins FROM pets WHERE user_id = ?', (user_id,))
            result = self.cursor.fetchone()

            if result:
                pet_name, pet_img, swipe_count, is_cracked, coins = result

                if pet_name:  # –ï—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –µ—Å—Ç—å
                    msg = f"–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü: {pet_name} üêæ\n–£ —Ç–µ–±—è {coins} –º–æ–Ω–µ—Ç.\n/reset - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
                    await update.message.reply_photo(photo=pet_img, caption=msg)
                elif is_cracked:  # –ï—Å–ª–∏ —è–π—Ü–æ —Ä–∞–∑–±–∏—Ç–æ, –Ω–æ –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –≤—ã–±—Ä–∞–Ω
                    await update.message.reply_text("–Ø–π—Ü–æ —Ä–∞–∑–±–∏—Ç–æ, –Ω–æ –ø–∏—Ç–æ–º–µ—Ü –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
                else:  # –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
                    await self._send_game_button(update, swipe_count)
            else:
                await self._send_game_button(update, 0)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user_id = update.effective_user.id
            self.cursor.execute('''UPDATE pets SET level = 0, actions = 0, pet = NULL, img = NULL, swipe_count = 0, is_cracked = 0, coins = 0 WHERE user_id = ?''', (user_id,))
            self.conn.commit()
            await update.message.reply_text("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. /start - –Ω–æ–≤–æ–µ —è–π—Ü–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /reset: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")

    async def handle_web_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user_id = update.effective_user.id
            data = json.loads(update.message.web_app_data.data)

            swipe_count = data.get("actions", 0)
            is_cracked = swipe_count >= 10

            self.update_progress(user_id, swipe_count, is_cracked)

            if data.get("pet"):
                self.cursor.execute('''UPDATE pets SET pet = ?, img = ? WHERE user_id = ?''', (data["pet"], data["img"], user_id))
                self.conn.commit()
                await update.message.reply_text(f"–ü–∏—Ç–æ–º–µ—Ü {data['pet']} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
            else:
                await update.message.reply_text("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö Web App: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

    def _init_user(self, user_id):
        self.cursor.execute('''INSERT OR IGNORE INTO pets (user_id, level, actions, pet, img, swipe_count, is_cracked, rarity, coins) VALUES (?, 0, 0, NULL, NULL, 0, 0, "common", 0)''', (user_id,))
        self.conn.commit()

    def update_progress(self, user_id, swipe_count, is_cracked=False):
        self.cursor.execute('''UPDATE pets SET swipe_count = ?, is_cracked = ? WHERE user_id = ?''', (swipe_count, int(is_cracked), user_id))
        self.conn.commit()

    async def _send_game_button(self, update, swipe_count):
        url = f"https://maximus9431.github.io/game/?swipe_count={swipe_count}"
        await update.message.reply_text(
            "–í—ã–ª—É–ø–∏ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞! ü•ö",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ñ∂Ô∏è –ò–≥—Ä–∞—Ç—å", web_app={"url": url})]])
        )

if __name__ == "__main__":
    bot = PetBot()
    app = Application.builder().token(bot.token).build()

    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("reset", bot.reset))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, bot.handle_web_data))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
